generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

// Enums
enum StepType {
  INFOGRAPHIC
  SMARTLIST
  CARDGRID
}

enum CardStrength {
  LOW
  MEDIUM
  HIGH
}

enum Color {
  RED
  PINK
  PURPLE
  YELLOW
  TAN
  ORANGE
  GREEN
  LIGHTBLUE
  BLUE
  DARKBLUE
}

// Models
model Round {
  id Int @id @default(autoincrement())

  link1 String?
  link2 String?

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name String
  icon String

  roundId    Int
  round      Round       @relation(fields: [roundId], references: [id])
  attributes Attribute[]
  steps      Step[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Step {
  id Int @id @default(autoincrement())

  title       String
  description String?
  icon        String
  type        StepType

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  infographics      Infographic[]
  items             Item[]
  cards             Card[]
  smartListFilter   SmartListFilter? @relation(fields: [smartListFilterId], references: [id])
  smartListFilterId Int?
  keywords          Keyword[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, categoryId])
}

model Infographic {
  id Int @id @default(autoincrement())

  markdown String
  image    String

  stepId Int
  step   Step @relation(fields: [stepId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id Int @id @default(autoincrement())

  markdown String

  stepId      Int
  step        Step       @relation(fields: [stepId], references: [id])
  attributeId Int?
  attribute   Attribute? @relation(fields: [attributeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id Int @id @default(autoincrement())

  title    String
  markdown String
  strength CardStrength

  stepId      Int
  step        Step       @relation(fields: [stepId], references: [id])
  attributeId Int?
  attribute   Attribute? @relation(fields: [attributeId], references: [id])
  keywords    Keyword[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Keyword {
  id Int @id @default(autoincrement())

  value String

  cards Card[]

  Step   Step @relation(fields: [stepId], references: [id])
  stepId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([value, stepId])
}

model Attribute {
  id Int @id @default(autoincrement())

  value       String
  description String
  color       Color  @default(LIGHTBLUE)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  items      Item[]
  cards      Card[]

  smartListFilter   SmartListFilter @relation(fields: [smartListFilterId], references: [id])
  smartListFilterId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmartListFilter {
  id Int @id @default(autoincrement())

  title String

  attributes Attribute[]
  steps      Step[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserWhitelist {
  email       String   @id @unique()
  whiteListed Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
