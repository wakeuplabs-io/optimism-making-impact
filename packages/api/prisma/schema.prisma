generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

// Enums
enum StepType {
  INFOGRAPHY
  ITEMS
  CARD
}

enum CardStrength {
  LOW
  MEDIUM
  HIGH
}

enum Color {
  RED
  PINK
  PURPLE
  YELLOW
  TAN
  ORANGE
  GREEN
  LIGHTBLUE
  BLUE
  DARKBLUE
}

// Models
model Round {
  id Int @id @default(autoincrement())

  link1 String? @default("")
  link2 String? @default("")

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name String
  icon String

  roundId    Int
  round      Round       @relation(fields: [roundId], references: [id])
  attributes Attribute[]
  steps      Step[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Step {
  id Int @id @default(autoincrement())

  title       String
  description String?  @default("")
  icon        String
  position    Int
  type        StepType

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  infographies Infography[]
  items        Item[]
  cards        Card[]
  smartList    SmartList?   @relation(fields: [smartListId], references: [id])
  smartListId  Int?
  keywords     Keyword[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([position, categoryId])
  @@unique([title, categoryId])
}

model Infography {
  id Int @id @default(autoincrement())

  markdown String
  image    String
  position Int

  stepId Int
  step   Step @relation(fields: [stepId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id Int @id @default(autoincrement())

  markdown String
  position Int

  stepId      Int
  step        Step       @relation(fields: [stepId], references: [id], onDelete: Cascade)
  attributeId Int?
  attribute   Attribute? @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id Int @id @default(autoincrement())

  title    String
  markdown String
  strength CardStrength
  position Int

  stepId      Int
  step        Step       @relation(fields: [stepId], references: [id], onDelete: Cascade)
  attributeId Int?
  attribute   Attribute? @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  keywords    Keyword[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Keyword {
  id Int @id @default(autoincrement())

  value String

  cards Card[]

  Step   Step @relation(fields: [stepId], references: [id])
  stepId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([value, stepId])
}

model Attribute {
  id Int @id @default(autoincrement())

  value       String
  description String
  color       Color  @default(LIGHTBLUE)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  items      Item[]
  cards      Card[]

  smartList   SmartList @relation(fields: [smartListId], references: [id])
  smartListId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmartList {
  id Int @id @default(autoincrement())

  title String

  attributes Attribute[]
  steps      Step[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
