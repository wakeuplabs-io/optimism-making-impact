generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

// Enums
enum StepType {
  INFOGRAPHY
  ITEMS
  CARD
}

enum CardStrength {
  LOW
  MEDIUM
  HIGH
}

// Models
model Round {
  id Int @id @default(autoincrement())

  name String
  icon String

  link1 String? @default("")
  link2 String? @default("")

  categories Category[]
  steps      Step[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name String
  icon String

  roundId    Int
  round      Round       @relation(fields: [roundId], references: [id])
  attributes Attribute[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Step {
  id Int @id @default(autoincrement())

  title    String
  icon     String
  position Int
  type     StepType

  roundId      Int
  round        Round        @relation(fields: [roundId], references: [id])
  infographies Infography[]
  items        Item[]
  cards        Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([position, roundId])
}

model Infography {
  id Int @id @default(autoincrement())

  markdown String
  image    String
  position Int

  stepId Int
  step   Step @relation(fields: [stepId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id Int @id @default(autoincrement())

  markdown String
  position Int

  stepId      Int
  step        Step      @relation(fields: [stepId], references: [id])
  attributeId Int
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id Int @id @default(autoincrement())

  title    String
  markdown String
  strength CardStrength
  position Int

  stepId       Int
  step         Step          @relation(fields: [stepId], references: [id])
  attributeId  Int
  attribute    Attribute     @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  cardKeywords CardKeyword[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Keyword {
  id Int @id @default(autoincrement())

  value String

  cardKeywords CardKeyword[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CardKeyword {
  cardId    Int
  keywordId Int

  card    Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([cardId, keywordId])
}

model Attribute {
  id Int @id @default(autoincrement())

  value String

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  items      Item[]
  cards      Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
